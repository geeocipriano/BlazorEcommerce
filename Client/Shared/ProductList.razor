@inject IProductService ProductService
@inject IToastService toastSevice
@implements IDisposable

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <Loading />
}
else{
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <div class="d-flex justify-content-between align-content-center">
                        <h5 class="price">
                            $@product.Price
                        </h5>
                        <div class="align-self-end">
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter" @onclick="() => prod = product">
                                Edit
                            </button>
                            <button type="button" class="btn btn-primary" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                        </div>

                    </div>
                </div>

            </li>
        }
    </ul>

    <!-- Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Edit Product</h5>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Title</label>
                            <input type="text" class="form-control" id="recipient-name" @bind="prod.Title">
                        </div>
                        <div class="form-group">
                            <label for="message-text" class="col-form-label">Description</label>
                            <textarea class="form-control" id="message-text" @bind="prod.Description"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Url Image</label>
                            <input type="text" class="form-control" id="recipient-name" @bind="prod.ImageUrl">
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Price</label>
                            <input type="text" class="form-control" id="recipient-name"@bind="prod.Price">
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="col-form-label">Category</label>
                            <input type="text" class="form-control" id="recipient-name" @bind="prod.CategoryId">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

}

@code {
    Product prod = new Product();

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
    public async Task DeleteProduct(int productId)
    {
        var res = await ProductService.DeleteProduct(productId);
        if (res == "OK")
        {
            toastSevice.ShowSuccess("Produto Deletado com Sucesso!", "SUCESSO");
            await ProductService.GetProducts();
        }
        else
        {
            toastSevice.ShowError("Falha ao Deletar Produto!", "ERRO");
        }
    }
}
